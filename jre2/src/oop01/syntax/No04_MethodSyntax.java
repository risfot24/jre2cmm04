package oop01.syntax;
/*
 Date : 
 Author :
 Desc : 메서드 문법
* */

/*
 메소드 개요.
 함수 = method = function = procedure   ,  뒤로 가면 method 와 function , procedure 이 구분이 된다..
  1) 메소드는 리턴값이 있어야 하는데 없으면 void 기술
  2) 메소드는 함수 이름 다음에 괄호가 있어야 함
  3) 메소드는 필요한 경우 메소드이름(파라미터){} 형태를 가짐 
* */
/*
  메소드 Syntax
  - c언어의 함수와 동일, 그렇게 까지 동일 하지 는 않다.. 
  - 데이터 처리 기능을 구현,
  - 리턴값이 없는 메소드는 void 지정,
  - 메소드가 받는 인수(=파라미터) 와 데이터타입은 메소드를 호출하는 쪽과
         일치해야함
  - Method Overloading(중복정의), Overriding(재정의) 기술로 확장.
  - 메소드가 리턴하는 값과 리턴되는 값의 데이터 타입은 일치해야 함 .        
     
       중복정의  duplicate     , 적재량 초과 (과정)
       재정의                         , 
  
  -- 선언 과 정의 의 차이점..
        선언 : 공간을 만들어 놓은것 !!ex)땅을 경작 해놓고 알려주는것  메모리에 할당( 
        정의 : 내용에 대한 상세한 기술 ex) 땅에 콩밭을 할지, 배추밭을 할지.. 
 
   스택 -> 박스  , 
 * */


/*
 메소드의 호출 방법
    참조변수.메소드이름(파라미터, 파라미터..);
  
 * */
/*
  메소드 종류
   - static 메소드 = 정적 메소드, 클래스 메소드 , static 이 붙은 메소드 !! 고정된 메소드
        인스턴스 멤버를 사용할 수 없다.
        인스턴스를 사용하지 않아도 사용 가능  ,
             - 오버라이딩을 못한다..., 즉 ! 상속을 못한다.. 즉!! 객체가 아니다.. , 
                -그래서 자바는 객체지향언어이다.
    - non-static 메소드 = 일반 메소드, 인스턴스 메소드, static이 안붙어있다.
            멤변 중 모든 인스턴스에 공통 사용하는 메소드
             메소드 작업 수행시 인변을 필요로하는 메소드 

 * */
 
/*  
  오버로딩
     - 메소드 중복, 파라미터 개수나 타입만 다름
     - 메소드 이름은 동일하다.
 * */


public class No04_MethodSyntax {

}
